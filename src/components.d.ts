/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@stencil/router';
import '@stencil/state-tunnel';

import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';

declare global {

  namespace StencilComponents {
    interface AppHome {

    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppRoot {
      'history': RouterHistory;
    }
  }

  interface HTMLAppRootElement extends StencilComponents.AppRoot, HTMLStencilElement {}

  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-root': JSXElements.AppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface AppRootAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppToolbar {
      'router': RouterHistory;
      'visible': boolean;
    }
  }

  interface HTMLAppToolbarElement extends StencilComponents.AppToolbar, HTMLStencilElement {}

  var HTMLAppToolbarElement: {
    prototype: HTMLAppToolbarElement;
    new (): HTMLAppToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'app-toolbar': HTMLAppToolbarElement;
  }
  interface ElementTagNameMap {
    'app-toolbar': HTMLAppToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-toolbar': JSXElements.AppToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface AppToolbarAttributes extends HTMLAttributes {
      'router'?: RouterHistory;
      'visible'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface BasePage {

    }
  }

  interface HTMLBasePageElement extends StencilComponents.BasePage, HTMLStencilElement {}

  var HTMLBasePageElement: {
    prototype: HTMLBasePageElement;
    new (): HTMLBasePageElement;
  };
  interface HTMLElementTagNameMap {
    'base-page': HTMLBasePageElement;
  }
  interface ElementTagNameMap {
    'base-page': HTMLBasePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'base-page': JSXElements.BasePageAttributes;
    }
  }
  namespace JSXElements {
    export interface BasePageAttributes extends HTMLAttributes {
      'onShowToolbarEvent'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface FieldView {
      'key': string;
      'value': string;
      'valueColor': string;
    }
  }

  interface HTMLFieldViewElement extends StencilComponents.FieldView, HTMLStencilElement {}

  var HTMLFieldViewElement: {
    prototype: HTMLFieldViewElement;
    new (): HTMLFieldViewElement;
  };
  interface HTMLElementTagNameMap {
    'field-view': HTMLFieldViewElement;
  }
  interface ElementTagNameMap {
    'field-view': HTMLFieldViewElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'field-view': JSXElements.FieldViewAttributes;
    }
  }
  namespace JSXElements {
    export interface FieldViewAttributes extends HTMLAttributes {
      'key'?: string;
      'value'?: string;
      'valueColor'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ProgressBar {
      'isHorizontal': boolean;
    }
  }

  interface HTMLProgressBarElement extends StencilComponents.ProgressBar, HTMLStencilElement {}

  var HTMLProgressBarElement: {
    prototype: HTMLProgressBarElement;
    new (): HTMLProgressBarElement;
  };
  interface HTMLElementTagNameMap {
    'progress-bar': HTMLProgressBarElement;
  }
  interface ElementTagNameMap {
    'progress-bar': HTMLProgressBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'progress-bar': JSXElements.ProgressBarAttributes;
    }
  }
  namespace JSXElements {
    export interface ProgressBarAttributes extends HTMLAttributes {
      'isHorizontal'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface RepoDetailPage {
      'history': RouterHistory;
      'match': MatchResults;
    }
  }

  interface HTMLRepoDetailPageElement extends StencilComponents.RepoDetailPage, HTMLStencilElement {}

  var HTMLRepoDetailPageElement: {
    prototype: HTMLRepoDetailPageElement;
    new (): HTMLRepoDetailPageElement;
  };
  interface HTMLElementTagNameMap {
    'repo-detail-page': HTMLRepoDetailPageElement;
  }
  interface ElementTagNameMap {
    'repo-detail-page': HTMLRepoDetailPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'repo-detail-page': JSXElements.RepoDetailPageAttributes;
    }
  }
  namespace JSXElements {
    export interface RepoDetailPageAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
      'match'?: MatchResults;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ReposPage {
      'history': RouterHistory;
    }
  }

  interface HTMLReposPageElement extends StencilComponents.ReposPage, HTMLStencilElement {}

  var HTMLReposPageElement: {
    prototype: HTMLReposPageElement;
    new (): HTMLReposPageElement;
  };
  interface HTMLElementTagNameMap {
    'repos-page': HTMLReposPageElement;
  }
  interface ElementTagNameMap {
    'repos-page': HTMLReposPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'repos-page': JSXElements.ReposPageAttributes;
    }
  }
  namespace JSXElements {
    export interface ReposPageAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
